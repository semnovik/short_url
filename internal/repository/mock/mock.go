// Code generated by MockGen. DO NOT EDIT.
// Source: repos.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"
	repository "short_url/internal/repository"

	gomock "github.com/golang/mock/gomock"
)

// MockURLStorage is a mock of URLStorage interface.
type MockURLStorage struct {
	ctrl     *gomock.Controller
	recorder *MockURLStorageMockRecorder
}

// MockURLStorageMockRecorder is the mock recorder for MockURLStorage.
type MockURLStorageMockRecorder struct {
	mock *MockURLStorage
}

// NewMockURLStorage creates a new mock instance.
func NewMockURLStorage(ctrl *gomock.Controller) *MockURLStorage {
	mock := &MockURLStorage{ctrl: ctrl}
	mock.recorder = &MockURLStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockURLStorage) EXPECT() *MockURLStorageMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockURLStorage) Add(url string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", url)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add.
func (mr *MockURLStorageMockRecorder) Add(url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockURLStorage)(nil).Add), url)
}

// AddByUser mocks base method.
func (m *MockURLStorage) AddByUser(userID, originalURL string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddByUser", userID, originalURL)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddByUser indicates an expected call of AddByUser.
func (mr *MockURLStorageMockRecorder) AddByUser(userID, originalURL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddByUser", reflect.TypeOf((*MockURLStorage)(nil).AddByUser), userID, originalURL)
}

// AllUsersURLS mocks base method.
func (m *MockURLStorage) AllUsersURLS(userID string) []repository.URLObj {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllUsersURLS", userID)
	ret0, _ := ret[0].([]repository.URLObj)
	return ret0
}

// AllUsersURLS indicates an expected call of AllUsersURLS.
func (mr *MockURLStorageMockRecorder) AllUsersURLS(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllUsersURLS", reflect.TypeOf((*MockURLStorage)(nil).AllUsersURLS), userID)
}

// DeleteByUUID mocks base method.
func (m *MockURLStorage) DeleteByUUID(uuid []string, userID string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteByUUID", uuid, userID)
}

// DeleteByUUID indicates an expected call of DeleteByUUID.
func (mr *MockURLStorageMockRecorder) DeleteByUUID(uuid, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByUUID", reflect.TypeOf((*MockURLStorage)(nil).DeleteByUUID), uuid, userID)
}

// Get mocks base method.
func (m *MockURLStorage) Get(uuid string) (string, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", uuid)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *MockURLStorageMockRecorder) Get(uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockURLStorage)(nil).Get), uuid)
}

// IsUserExist mocks base method.
func (m *MockURLStorage) IsUserExist(userID string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsUserExist", userID)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsUserExist indicates an expected call of IsUserExist.
func (mr *MockURLStorageMockRecorder) IsUserExist(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsUserExist", reflect.TypeOf((*MockURLStorage)(nil).IsUserExist), userID)
}

// Ping mocks base method.
func (m *MockURLStorage) Ping() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping")
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockURLStorageMockRecorder) Ping() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockURLStorage)(nil).Ping))
}
