// Code generated by MockGen. DO NOT EDIT.
// Source: repos.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"
	repository "short_url/internal/repository"

	gomock "github.com/golang/mock/gomock"
)

// MockURLRepo is a mock of URLRepo interface.
type MockURLRepo struct {
	ctrl     *gomock.Controller
	recorder *MockURLRepoMockRecorder
}

// MockURLRepoMockRecorder is the mock recorder for MockURLRepo.
type MockURLRepoMockRecorder struct {
	mock *MockURLRepo
}

// NewMockURLRepo creates a new mock instance.
func NewMockURLRepo(ctrl *gomock.Controller) *MockURLRepo {
	mock := &MockURLRepo{ctrl: ctrl}
	mock.recorder = &MockURLRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockURLRepo) EXPECT() *MockURLRepoMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockURLRepo) Add(url string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", url)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add.
func (mr *MockURLRepoMockRecorder) Add(url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockURLRepo)(nil).Add), url)
}

// AddByUser mocks base method.
func (m *MockURLRepo) AddByUser(userID, originalURL, shortURL string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddByUser", userID, originalURL, shortURL)
}

// AddByUser indicates an expected call of AddByUser.
func (mr *MockURLRepoMockRecorder) AddByUser(userID, originalURL, shortURL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddByUser", reflect.TypeOf((*MockURLRepo)(nil).AddByUser), userID, originalURL, shortURL)
}

// AllUsersURLS mocks base method.
func (m *MockURLRepo) AllUsersURLS(userID string) []repository.URLObj {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllUsersURLS", userID)
	ret0, _ := ret[0].([]repository.URLObj)
	return ret0
}

// AllUsersURLS indicates an expected call of AllUsersURLS.
func (mr *MockURLRepoMockRecorder) AllUsersURLS(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllUsersURLS", reflect.TypeOf((*MockURLRepo)(nil).AllUsersURLS), userID)
}

// Get mocks base method.
func (m *MockURLRepo) Get(uuid string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", uuid)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockURLRepoMockRecorder) Get(uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockURLRepo)(nil).Get), uuid)
}

// IsUserExist mocks base method.
func (m *MockURLRepo) IsUserExist(userID string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsUserExist", userID)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsUserExist indicates an expected call of IsUserExist.
func (mr *MockURLRepoMockRecorder) IsUserExist(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsUserExist", reflect.TypeOf((*MockURLRepo)(nil).IsUserExist), userID)
}
