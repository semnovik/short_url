package service_mock

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

//go:generate minimock -i short_url/internal/app/services.ShorterService -o ./internal/app/services/service_mock/shorter_service.go -n ShorterServiceMock

import (
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// ShorterServiceMock implements services.ShorterService
type ShorterServiceMock struct {
	t minimock.Tester

	funcGetURLByID          func(urlID string) (s1 string, err error)
	inspectFuncGetURLByID   func(urlID string)
	afterGetURLByIDCounter  uint64
	beforeGetURLByIDCounter uint64
	GetURLByIDMock          mShorterServiceMockGetURLByID

	funcPostURL          func(url string) (s1 string)
	inspectFuncPostURL   func(url string)
	afterPostURLCounter  uint64
	beforePostURLCounter uint64
	PostURLMock          mShorterServiceMockPostURL
}

// NewShorterServiceMock returns a mock for services.ShorterService
func NewShorterServiceMock(t minimock.Tester) *ShorterServiceMock {
	m := &ShorterServiceMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.GetURLByIDMock = mShorterServiceMockGetURLByID{mock: m}
	m.GetURLByIDMock.callArgs = []*ShorterServiceMockGetURLByIDParams{}

	m.PostURLMock = mShorterServiceMockPostURL{mock: m}
	m.PostURLMock.callArgs = []*ShorterServiceMockPostURLParams{}

	return m
}

type mShorterServiceMockGetURLByID struct {
	mock               *ShorterServiceMock
	defaultExpectation *ShorterServiceMockGetURLByIDExpectation
	expectations       []*ShorterServiceMockGetURLByIDExpectation

	callArgs []*ShorterServiceMockGetURLByIDParams
	mutex    sync.RWMutex
}

// ShorterServiceMockGetURLByIDExpectation specifies expectation struct of the ShorterService.GetURLByID
type ShorterServiceMockGetURLByIDExpectation struct {
	mock    *ShorterServiceMock
	params  *ShorterServiceMockGetURLByIDParams
	results *ShorterServiceMockGetURLByIDResults
	Counter uint64
}

// ShorterServiceMockGetURLByIDParams contains parameters of the ShorterService.GetURLByID
type ShorterServiceMockGetURLByIDParams struct {
	urlID string
}

// ShorterServiceMockGetURLByIDResults contains results of the ShorterService.GetURLByID
type ShorterServiceMockGetURLByIDResults struct {
	s1  string
	err error
}

// Expect sets up expected params for ShorterService.GetURLByID
func (mmGetURLByID *mShorterServiceMockGetURLByID) Expect(urlID string) *mShorterServiceMockGetURLByID {
	if mmGetURLByID.mock.funcGetURLByID != nil {
		mmGetURLByID.mock.t.Fatalf("ShorterServiceMock.GetURLByID mock is already set by Set")
	}

	if mmGetURLByID.defaultExpectation == nil {
		mmGetURLByID.defaultExpectation = &ShorterServiceMockGetURLByIDExpectation{}
	}

	mmGetURLByID.defaultExpectation.params = &ShorterServiceMockGetURLByIDParams{urlID}
	for _, e := range mmGetURLByID.expectations {
		if minimock.Equal(e.params, mmGetURLByID.defaultExpectation.params) {
			mmGetURLByID.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetURLByID.defaultExpectation.params)
		}
	}

	return mmGetURLByID
}

// Inspect accepts an inspector function that has same arguments as the ShorterService.GetURLByID
func (mmGetURLByID *mShorterServiceMockGetURLByID) Inspect(f func(urlID string)) *mShorterServiceMockGetURLByID {
	if mmGetURLByID.mock.inspectFuncGetURLByID != nil {
		mmGetURLByID.mock.t.Fatalf("Inspect function is already set for ShorterServiceMock.GetURLByID")
	}

	mmGetURLByID.mock.inspectFuncGetURLByID = f

	return mmGetURLByID
}

// Return sets up results that will be returned by ShorterService.GetURLByID
func (mmGetURLByID *mShorterServiceMockGetURLByID) Return(s1 string, err error) *ShorterServiceMock {
	if mmGetURLByID.mock.funcGetURLByID != nil {
		mmGetURLByID.mock.t.Fatalf("ShorterServiceMock.GetURLByID mock is already set by Set")
	}

	if mmGetURLByID.defaultExpectation == nil {
		mmGetURLByID.defaultExpectation = &ShorterServiceMockGetURLByIDExpectation{mock: mmGetURLByID.mock}
	}
	mmGetURLByID.defaultExpectation.results = &ShorterServiceMockGetURLByIDResults{s1, err}
	return mmGetURLByID.mock
}

// Set uses given function f to mock the ShorterService.GetURLByID method
func (mmGetURLByID *mShorterServiceMockGetURLByID) Set(f func(urlID string) (s1 string, err error)) *ShorterServiceMock {
	if mmGetURLByID.defaultExpectation != nil {
		mmGetURLByID.mock.t.Fatalf("Default expectation is already set for the ShorterService.GetURLByID method")
	}

	if len(mmGetURLByID.expectations) > 0 {
		mmGetURLByID.mock.t.Fatalf("Some expectations are already set for the ShorterService.GetURLByID method")
	}

	mmGetURLByID.mock.funcGetURLByID = f
	return mmGetURLByID.mock
}

// When sets expectation for the ShorterService.GetURLByID which will trigger the result defined by the following
// Then helper
func (mmGetURLByID *mShorterServiceMockGetURLByID) When(urlID string) *ShorterServiceMockGetURLByIDExpectation {
	if mmGetURLByID.mock.funcGetURLByID != nil {
		mmGetURLByID.mock.t.Fatalf("ShorterServiceMock.GetURLByID mock is already set by Set")
	}

	expectation := &ShorterServiceMockGetURLByIDExpectation{
		mock:   mmGetURLByID.mock,
		params: &ShorterServiceMockGetURLByIDParams{urlID},
	}
	mmGetURLByID.expectations = append(mmGetURLByID.expectations, expectation)
	return expectation
}

// Then sets up ShorterService.GetURLByID return parameters for the expectation previously defined by the When method
func (e *ShorterServiceMockGetURLByIDExpectation) Then(s1 string, err error) *ShorterServiceMock {
	e.results = &ShorterServiceMockGetURLByIDResults{s1, err}
	return e.mock
}

// GetURLByID implements services.ShorterService
func (mmGetURLByID *ShorterServiceMock) GetURLByID(urlID string) (s1 string, err error) {
	mm_atomic.AddUint64(&mmGetURLByID.beforeGetURLByIDCounter, 1)
	defer mm_atomic.AddUint64(&mmGetURLByID.afterGetURLByIDCounter, 1)

	if mmGetURLByID.inspectFuncGetURLByID != nil {
		mmGetURLByID.inspectFuncGetURLByID(urlID)
	}

	mm_params := &ShorterServiceMockGetURLByIDParams{urlID}

	// Record call args
	mmGetURLByID.GetURLByIDMock.mutex.Lock()
	mmGetURLByID.GetURLByIDMock.callArgs = append(mmGetURLByID.GetURLByIDMock.callArgs, mm_params)
	mmGetURLByID.GetURLByIDMock.mutex.Unlock()

	for _, e := range mmGetURLByID.GetURLByIDMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.s1, e.results.err
		}
	}

	if mmGetURLByID.GetURLByIDMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetURLByID.GetURLByIDMock.defaultExpectation.Counter, 1)
		mm_want := mmGetURLByID.GetURLByIDMock.defaultExpectation.params
		mm_got := ShorterServiceMockGetURLByIDParams{urlID}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetURLByID.t.Errorf("ShorterServiceMock.GetURLByID got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetURLByID.GetURLByIDMock.defaultExpectation.results
		if mm_results == nil {
			mmGetURLByID.t.Fatal("No results are set for the ShorterServiceMock.GetURLByID")
		}
		return (*mm_results).s1, (*mm_results).err // nolint:govet
	}
	if mmGetURLByID.funcGetURLByID != nil {
		return mmGetURLByID.funcGetURLByID(urlID)
	}
	mmGetURLByID.t.Fatalf("Unexpected call to ShorterServiceMock.GetURLByID. %v", urlID)
	return
}

// GetURLByIDAfterCounter returns a count of finished ShorterServiceMock.GetURLByID invocations
func (mmGetURLByID *ShorterServiceMock) GetURLByIDAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetURLByID.afterGetURLByIDCounter)
}

// GetURLByIDBeforeCounter returns a count of ShorterServiceMock.GetURLByID invocations
func (mmGetURLByID *ShorterServiceMock) GetURLByIDBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetURLByID.beforeGetURLByIDCounter)
}

// Calls returns a list of arguments used in each call to ShorterServiceMock.GetURLByID.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetURLByID *mShorterServiceMockGetURLByID) Calls() []*ShorterServiceMockGetURLByIDParams {
	mmGetURLByID.mutex.RLock()

	argCopy := make([]*ShorterServiceMockGetURLByIDParams, len(mmGetURLByID.callArgs))
	copy(argCopy, mmGetURLByID.callArgs)

	mmGetURLByID.mutex.RUnlock()

	return argCopy
}

// MinimockGetURLByIDDone returns true if the count of the GetURLByID invocations corresponds
// the number of defined expectations
func (m *ShorterServiceMock) MinimockGetURLByIDDone() bool {
	for _, e := range m.GetURLByIDMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetURLByIDMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetURLByIDCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetURLByID != nil && mm_atomic.LoadUint64(&m.afterGetURLByIDCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetURLByIDInspect logs each unmet expectation
func (m *ShorterServiceMock) MinimockGetURLByIDInspect() {
	for _, e := range m.GetURLByIDMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ShorterServiceMock.GetURLByID with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetURLByIDMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetURLByIDCounter) < 1 {
		if m.GetURLByIDMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to ShorterServiceMock.GetURLByID")
		} else {
			m.t.Errorf("Expected call to ShorterServiceMock.GetURLByID with params: %#v", *m.GetURLByIDMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetURLByID != nil && mm_atomic.LoadUint64(&m.afterGetURLByIDCounter) < 1 {
		m.t.Error("Expected call to ShorterServiceMock.GetURLByID")
	}
}

type mShorterServiceMockPostURL struct {
	mock               *ShorterServiceMock
	defaultExpectation *ShorterServiceMockPostURLExpectation
	expectations       []*ShorterServiceMockPostURLExpectation

	callArgs []*ShorterServiceMockPostURLParams
	mutex    sync.RWMutex
}

// ShorterServiceMockPostURLExpectation specifies expectation struct of the ShorterService.PostURL
type ShorterServiceMockPostURLExpectation struct {
	mock    *ShorterServiceMock
	params  *ShorterServiceMockPostURLParams
	results *ShorterServiceMockPostURLResults
	Counter uint64
}

// ShorterServiceMockPostURLParams contains parameters of the ShorterService.PostURL
type ShorterServiceMockPostURLParams struct {
	url string
}

// ShorterServiceMockPostURLResults contains results of the ShorterService.PostURL
type ShorterServiceMockPostURLResults struct {
	s1 string
}

// Expect sets up expected params for ShorterService.PostURL
func (mmPostURL *mShorterServiceMockPostURL) Expect(url string) *mShorterServiceMockPostURL {
	if mmPostURL.mock.funcPostURL != nil {
		mmPostURL.mock.t.Fatalf("ShorterServiceMock.PostURL mock is already set by Set")
	}

	if mmPostURL.defaultExpectation == nil {
		mmPostURL.defaultExpectation = &ShorterServiceMockPostURLExpectation{}
	}

	mmPostURL.defaultExpectation.params = &ShorterServiceMockPostURLParams{url}
	for _, e := range mmPostURL.expectations {
		if minimock.Equal(e.params, mmPostURL.defaultExpectation.params) {
			mmPostURL.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmPostURL.defaultExpectation.params)
		}
	}

	return mmPostURL
}

// Inspect accepts an inspector function that has same arguments as the ShorterService.PostURL
func (mmPostURL *mShorterServiceMockPostURL) Inspect(f func(url string)) *mShorterServiceMockPostURL {
	if mmPostURL.mock.inspectFuncPostURL != nil {
		mmPostURL.mock.t.Fatalf("Inspect function is already set for ShorterServiceMock.PostURL")
	}

	mmPostURL.mock.inspectFuncPostURL = f

	return mmPostURL
}

// Return sets up results that will be returned by ShorterService.PostURL
func (mmPostURL *mShorterServiceMockPostURL) Return(s1 string) *ShorterServiceMock {
	if mmPostURL.mock.funcPostURL != nil {
		mmPostURL.mock.t.Fatalf("ShorterServiceMock.PostURL mock is already set by Set")
	}

	if mmPostURL.defaultExpectation == nil {
		mmPostURL.defaultExpectation = &ShorterServiceMockPostURLExpectation{mock: mmPostURL.mock}
	}
	mmPostURL.defaultExpectation.results = &ShorterServiceMockPostURLResults{s1}
	return mmPostURL.mock
}

// Set uses given function f to mock the ShorterService.PostURL method
func (mmPostURL *mShorterServiceMockPostURL) Set(f func(url string) (s1 string)) *ShorterServiceMock {
	if mmPostURL.defaultExpectation != nil {
		mmPostURL.mock.t.Fatalf("Default expectation is already set for the ShorterService.PostURL method")
	}

	if len(mmPostURL.expectations) > 0 {
		mmPostURL.mock.t.Fatalf("Some expectations are already set for the ShorterService.PostURL method")
	}

	mmPostURL.mock.funcPostURL = f
	return mmPostURL.mock
}

// When sets expectation for the ShorterService.PostURL which will trigger the result defined by the following
// Then helper
func (mmPostURL *mShorterServiceMockPostURL) When(url string) *ShorterServiceMockPostURLExpectation {
	if mmPostURL.mock.funcPostURL != nil {
		mmPostURL.mock.t.Fatalf("ShorterServiceMock.PostURL mock is already set by Set")
	}

	expectation := &ShorterServiceMockPostURLExpectation{
		mock:   mmPostURL.mock,
		params: &ShorterServiceMockPostURLParams{url},
	}
	mmPostURL.expectations = append(mmPostURL.expectations, expectation)
	return expectation
}

// Then sets up ShorterService.PostURL return parameters for the expectation previously defined by the When method
func (e *ShorterServiceMockPostURLExpectation) Then(s1 string) *ShorterServiceMock {
	e.results = &ShorterServiceMockPostURLResults{s1}
	return e.mock
}

// PostURL implements services.ShorterService
func (mmPostURL *ShorterServiceMock) PostURL(url string) (s1 string) {
	mm_atomic.AddUint64(&mmPostURL.beforePostURLCounter, 1)
	defer mm_atomic.AddUint64(&mmPostURL.afterPostURLCounter, 1)

	if mmPostURL.inspectFuncPostURL != nil {
		mmPostURL.inspectFuncPostURL(url)
	}

	mm_params := &ShorterServiceMockPostURLParams{url}

	// Record call args
	mmPostURL.PostURLMock.mutex.Lock()
	mmPostURL.PostURLMock.callArgs = append(mmPostURL.PostURLMock.callArgs, mm_params)
	mmPostURL.PostURLMock.mutex.Unlock()

	for _, e := range mmPostURL.PostURLMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.s1
		}
	}

	if mmPostURL.PostURLMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmPostURL.PostURLMock.defaultExpectation.Counter, 1)
		mm_want := mmPostURL.PostURLMock.defaultExpectation.params
		mm_got := ShorterServiceMockPostURLParams{url}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmPostURL.t.Errorf("ShorterServiceMock.PostURL got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmPostURL.PostURLMock.defaultExpectation.results
		if mm_results == nil {
			mmPostURL.t.Fatal("No results are set for the ShorterServiceMock.PostURL")
		}
		some := mm_results.s1
		return some
	}
	if mmPostURL.funcPostURL != nil {
		return mmPostURL.funcPostURL(url)
	}
	mmPostURL.t.Fatalf("Unexpected call to ShorterServiceMock.PostURL. %v", url)
	return
}

// PostURLAfterCounter returns a count of finished ShorterServiceMock.PostURL invocations
func (mmPostURL *ShorterServiceMock) PostURLAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmPostURL.afterPostURLCounter)
}

// PostURLBeforeCounter returns a count of ShorterServiceMock.PostURL invocations
func (mmPostURL *ShorterServiceMock) PostURLBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmPostURL.beforePostURLCounter)
}

// Calls returns a list of arguments used in each call to ShorterServiceMock.PostURL.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmPostURL *mShorterServiceMockPostURL) Calls() []*ShorterServiceMockPostURLParams {
	mmPostURL.mutex.RLock()

	argCopy := make([]*ShorterServiceMockPostURLParams, len(mmPostURL.callArgs))
	copy(argCopy, mmPostURL.callArgs)

	mmPostURL.mutex.RUnlock()

	return argCopy
}

// MinimockPostURLDone returns true if the count of the PostURL invocations corresponds
// the number of defined expectations
func (m *ShorterServiceMock) MinimockPostURLDone() bool {
	for _, e := range m.PostURLMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.PostURLMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterPostURLCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcPostURL != nil && mm_atomic.LoadUint64(&m.afterPostURLCounter) < 1 {
		return false
	}
	return true
}

// MinimockPostURLInspect logs each unmet expectation
func (m *ShorterServiceMock) MinimockPostURLInspect() {
	for _, e := range m.PostURLMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ShorterServiceMock.PostURL with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.PostURLMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterPostURLCounter) < 1 {
		if m.PostURLMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to ShorterServiceMock.PostURL")
		} else {
			m.t.Errorf("Expected call to ShorterServiceMock.PostURL with params: %#v", *m.PostURLMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcPostURL != nil && mm_atomic.LoadUint64(&m.afterPostURLCounter) < 1 {
		m.t.Error("Expected call to ShorterServiceMock.PostURL")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *ShorterServiceMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockGetURLByIDInspect()

		m.MinimockPostURLInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *ShorterServiceMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *ShorterServiceMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockGetURLByIDDone() &&
		m.MinimockPostURLDone()
}
